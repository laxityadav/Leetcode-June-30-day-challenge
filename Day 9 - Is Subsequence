class Solution {
    public int lcs(String s, String t, int m, int n, int [][]dp)
    {
        if(m<0 || n<0)
            return 0;
        if(dp[m][n]!=-1)
            return dp[m][n];
        if(s.charAt(m) == t.charAt(n))
            return dp[m][n] = 1 + lcs(s, t, m-1, n-1, dp);
        else
            return dp[m][n] = Math.max(lcs(s, t, m, n-1, dp), lcs(s, t, m-1, n, dp));
    }
    public boolean isSubsequence(String s, String t) {
        if(s.length() > t.length())
            return false;
        int m = s.length(), n = t.length();
        int [][]dp = new int[m+1][n+1];
        for(int i=0;i<=m;i++)
            for(int j=0;j<=n;j++)
                dp[i][j] = -1;
        int len = lcs(s, t, m-1, n-1, dp);
        if(len == m)
            return true;
        else
            return false;
    }
}
