class Trie
{
    Trie []child;
    boolean last;
    Trie(){
        child = new Trie[26];
        last = false;
        for(int i=0;i<26;i++)
            child[i] = null;
    }
    public void insert(String str){
        Trie t = this;
        for(char ch:str.toCharArray()){
            if(t.child[ch - 'a'] == null) 
                t.child[ch - 'a'] = new Trie();
            t = t.child[ch - 'a'];
        }
        t.last = true;
    }
}
class Solution {
    public void dfs(char [][]board, int i, int j, String tmp, Trie trie, HashSet<String> set)
    {
        char ch = board[i][j];
        if(ch == '$') return;
        board[i][j] = '$';
        Trie t = trie.child[ch - 'a'];
        if(t != null)
        {           
            if(t.last)  set.add(tmp+ch);
            if(i+1 < board.length)    dfs(board, i+1, j, tmp+ch, t, set);
            if(i-1 >=0)               dfs(board, i-1, j, tmp+ch, t, set);
            if(j+1 < board[0].length) dfs(board, i, j+1, tmp+ch, t, set);
            if(j-1 >=0)               dfs(board, i, j-1, tmp+ch, t, set);
        }       
        board[i][j] = ch;
        //System.out.println("TES");
    }
    public List<String> findWords(char[][] board, String[] words) {
        List<String> ans = new ArrayList<>();
        if(words.length == 0) return ans;
        Trie trie = new Trie();
        for(String str:words)   
            trie.insert(str);
        
        HashSet<String> set = new HashSet<>();
        for(int i=0;i<board.length;i++)
            for(int j=0;j<board[0].length;j++)
                dfs(board, i, j, "", trie, set);
        
        for(String s:set)
            ans.add(s);
        return ans;
    }
}
