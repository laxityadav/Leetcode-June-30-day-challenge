class Solution {
    int [][]dp;
    public int recur(int amount, int []coins, int n)
    {
        if(n <= 0 || amount < 0)
            return 0;
        int count=0;
        if(amount == 0)
            return 1;
        if(dp[n][amount]!=-1)
            return dp[n][amount];
        if(amount-coins[n-1] >= 0){
            dp[n][amount-coins[n-1]] = recur(amount-coins[n-1], coins, n);
            count = count + dp[n][amount-coins[n-1]];
        }   
        dp[n-1][amount] = recur(amount, coins, n-1);
        count = count + dp[n-1][amount];
        return count;
    }
    public int change(int amount, int[] coins) {
        int m = coins.length, n = amount;
        if(n==0)
            return 1;
        dp = new int[m+1][n+1];
        for(int i=0;i<=m;i++)
            for(int j=0;j<=n;j++)
                dp[i][j]=-1;
        return recur(n, coins, m);
    }
}
